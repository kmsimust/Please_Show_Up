name: Django CI (backend)

on:
  push:
    paths:
      - "backend/**"
  pull_request:
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
          MYSQL_ROOT_PASSWORD: rootpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -prootpass"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system deps for mysqlclient + CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential default-libmysqlclient-dev default-mysql-client pkg-config

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # In case requirements.txt is missing something, ensure these essentials:
          pip install "django>=5.0" djangorestframework python-dotenv mysqlclient django-cors-headers django-rest-knox || true

      - name: Create .env for CI (matches your settings.py)
        run: |
          cat > .env << 'EOF'
          # Django
          DEBUG=1
          SECRET_KEY=ci-secret-key-change-me
          ALLOWED_HOSTS=*

          # MySQL (as required by your settings.py)
          MYSQL_NAME=test_db
          MYSQL_USER=test_user
          MYSQL_PASSWORD=test_pass
          DB_HOST=mysql
          DB_PORT=3306
          EOF

      - name: Wait for MySQL to accept connections
        run: |
          for i in {1..40}; do
            if mysqladmin ping -hmysql -utest_user -ptest_pass --silent; then
              echo "MySQL is up!"; break
            fi
            echo "Waiting for MySQL... ($i/40)"
            sleep 3
          done

      - name: Show Django version
        run: python -c "import django; print('Django', django.get_version())" || true

      - name: Apply migrations
        run: |
          python manage.py migrate --noinput

      - name: Run ONLY friend_request tests
        env:
          # If any code reads env directly (not via dotenv), export dupes too:
          MYSQL_NAME: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
          DB_HOST: mysql
          DB_PORT: "3306"
          SECRET_KEY: ci-secret-key-change-me
          DEBUG: "1"
        run: |
          # Optional: check for unmade migrations without failing the job
          python manage.py makemigrations --check --dry-run || true
          python manage.py test friend_request -v 2

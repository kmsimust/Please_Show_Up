name: backend-ci

on:
  push:
    paths:
      - "backend/**"
      - ".github/workflows/django-test.yml"
  pull_request:
    paths:
      - "backend/**"
      - ".github/workflows/django-test.yml"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: psu_db
          MYSQL_USER: psu
          MYSQL_PASSWORD: psu
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=15

    # ðŸ‘‡ Match your settings.py exactly
    env:
      PYTHON_VERSION: "3.12"
      DJANGO_SETTINGS_MODULE: "backend.settings"
      MYSQL_NAME: "psu_db"
      MYSQL_USER: "psu"
      MYSQL_PASSWORD: "psu"
      DB_HOST: "127.0.0.1"
      DB_PORT: "3306"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      # mysqlclient build deps (safe even if you use PyMySQL)
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config

      - name: Install Python deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django coverage

      - name: Wait for MySQL
        run: |
          for i in {1..40}; do
            if mysqladmin ping -h 127.0.0.1 -u root -proot --silent; then
              echo "MySQL is up"; break
            fi
            echo "Waiting for MySQL ($i/40) ..."
            sleep 2
          done

      - name: Django check & migrate
        working-directory: backend
        env:
          DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
          MYSQL_NAME: ${{ env.MYSQL_NAME }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
        run: |
          python manage.py check --deploy
          python manage.py migrate --noinput

      - name: Run tests
        working-directory: backend
        env:
          DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        run: |
          coverage run -m pytest -q
          coverage xml -o coverage.xml || true

      - name: Upload coverage (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-xml
          path: backend/coverage.xml
          if-no-files-found: ignore

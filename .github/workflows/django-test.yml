# This is a GitHub Actions workflow to run your specified Python tests.

name: Python CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events
  push:
    branches:
      - main
      - test/cd-pipeline # Triggers on your test branch
  # Triggers the workflow on pull request events targeting main
  pull_request:
    branches:
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # --- FIX ---
    # We are now running from the project root. NO working-directory.
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repository
        uses: actions/checkout@v4

      # Sets up a Python environment for use in actions
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # You can change this to your desired Python version

      # Installs dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          # Install the pytest-django plugin to load Django settings
          pip install pytest-django
          
          echo "--- Listing files in root directory ---"
          ls -la
          
          # This line will install all your project dependencies
          # --- FIX ---
          # We look for requirements.txt inside the 'backend' folder
          pip install -r backend/requirements.txt
          
          echo "--- Listing installed packages (to check for Django) ---"
          pip list

      # --- FIX ---
      # This is the new step that breaks the loop.
      # It creates a pytest.ini file to disable pytest-django's
      # automatic project discovery, which was causing the import errors.
      - name: Create pytest.ini to disable auto-discovery
        run: |
          echo -e "[pytest]\ndjango_find_project = false" > pytest.ini
          echo "--- Created pytest.ini ---"
          cat pytest.ini

      # Runs only your specified test file
      - name: Run specific tests
        env:
          # --- FIX ---
          # We add the project root (the workspace) back to the python path.
          # This allows absolute imports like 'from backend.friend_request ...' to work.
          PYTHONPATH: ${{ github.workspace }}
          
          # --- FIX ---
          # Your settings.py file is at 'backend/backend/settings.py'.
          # The correct module path from the root is 'backend.backend.settings'.
          DJANGO_SETTINGS_MODULE: backend.backend.settings
          
          # Based on your settings.py, we set this to '1'
          # to force Django to use the sqlite3 test database.
          USE_SQLITE_FOR_TESTS: '1'
          
        run: |
          # This command runs ONLY your specific test file
          # --nomigrations skips running migrations for faster tests
          # --- FIX ---
          # We provide the full path to the test file from the root
          pytest --nomigrations backend/friend_request/tests.py

